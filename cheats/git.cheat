% git

# 全局设置用户名
git config --global user.name <user_name>

# 全局设置用户邮箱
git config --global user.email <user_email>

# 查看所有远程主机详细信息
git remote -v

# 添加远程主机(指定地址)
git remote add <new_remote_name> <remote_url>

# 重命名远程主机名
git remote rename <old_remote_name> <new_remote_name>

# 删除远程主机
git remote remove <remote_name>

# 从当前分支创建新分支
git checkout -b <new_branch>

# 从当前分支指定commit创建新分支
git checkout -b <new_branch> <commit>

# 切换分支
git checkout <branch_name>

# 显示当前分支状态
git status

# 显示所有文件变更内容
git diff

# 显示指定文件变更内容
git diff <filename>

# 添加指定文件到暂存区
git add <filename>

# 添加所有修改文件到暂存区
git add .

# 添加所有变更文件(包括新增)到暂存区
git add -A

# 将暂存区内容提交并生成一条记录
git commit -m <message>

# 修改最后一次commit的信息
git commit --amend

# 推送指定分支到指定主机
git push -u <remote_name> <branch_name>

# 强制推送指定分支到指定主机，忽略版本差异
git push <remote_name> <branch_name> -f

# 拉取指定主机指定分支最新内容到当前本地分支
git pull <remote_name> <branch_name>

# 合并指定分支到当前分支
git merge <branch_name>

# 中止当前冲突解决过程，并重建pre-merge状态
git merge --abort

# 合并指定commit到当前分支
git cheery-pick <commit>

# 显示日志
git log --all --decorate --oneline --graph --pretty=format:"%C(red)%h%Creset -%C(yellow)%d%Creset %s %C(blue)%cn <%ae>%Creset %C(green)(%cd)%Creset" --abbrev-commit --date=format:"%Y/%m/%d %H:%M:%S"

# 显示远程分支提交日志
git log remotes/<remote_name>/<branch_name>

# 保存当前进度(暂存区+工作区)，恢复到上一次commit状态
git stash

# 列出所有保存进度的列表
git stash list

# 恢复最后一次的保存进度
git stash pop

# 恢复指定的保存进度
git stash apply <stash_id>

# 删除指定保存进度
git stash drop <stash_id>

# 删除所有保存进度
git stash clear

# 合并最近多个本地commit(未提交到远程分支)
git rebase -i HEAD~<length>

# 重新进入合并commit编辑模式
git rebase --edit-todo

# 将当前分支基于初始状态(创建时基于的分支状态)更新到最新内容，再将后续变更(提交)重新应用到当前分支
git rebase <branch_name>

# 继续rebase被终止的剩余步骤(保存合并信息、解决冲突后继续应用补丁文件)
git rebase --continue

# 停止rebase的所有未完成操作
git rebase --abort

$ remote_name: git remote | awk '{print $NF}' --- --column 1
$ branch_name: git branch | awk '{print $NF}' --- --column 1
