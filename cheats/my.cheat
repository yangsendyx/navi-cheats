% ys

# 按端口号筛选进程并杀掉
lsof -i:<port> | awk 'NR>1 {print $0}' | fzf | awk '{print $2}' | xargs sudo kill

# 按名称筛选进程并杀掉
ps aux | grep <process_name> | fzf | awk '{print $2}' | xargs sudo kill

# 列出指定端口进程
lsof -i:<port>

# 本机外网ip地址
dig +short myip.opendns.com @resolver1.opendns.com

# 查找指定域名ip信息
dig <domain>

# 本机主要ip地址
ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | tail -n1

# 本机ipv4地址
ifconfig en0 | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'

# 本机ipv6地址
ifconfig en0 | grep -Eo 'inet6.+%' | grep -Eo '((\w{4})*:)+\w{4}'

# 设置 mac wifi 的 dns 列表，空格分割
sudo networksetup -setdnsservers WI-FI <address_list>

# 排查 iOS App 是否使用 IDFA 标识(ios项目根目录下使用)
grep -r advertisingIdentifier .

# 进入 xcode mobileprovision 文件路径
cd ~/Library/MobileDevice/"Provisioning Profiles"

# 修改文件/文件夹拥有者为当前账号
sudo chown -R $(whoami) <file_or_dirpath>

# 压缩打包文件/文件夹
tar czvf <filename>.tar.gz <files_or_dir>

# 解压 .tar.gz 文件到当前目录
tar xzvf <targz_file>

# 解压缩 .tar.gz 文件到指定目录
tar xzvf <targz_file> -C <output_path>

# ping 路由器
ping 192.168.1.1

# 用 vsc 打开文本文件
open -a /Applications/Visual\ Studio\ Code.app <path>

# rn-ios 编译 Debug 版到 ios 设备
react-native run-ios --device="<deviceIos>"
# rn-and 安装 apk 到已连接 Android 设备
adb -s <deviceAnd> install <apkPath>

# 关闭 flutter 所有服务
ps aux | grep flutter | awk '{print $2}' | xargs kill -9

# 拉取 flutter 包并重启 flutter
flutter pub get && flutter run --enable-software-rendering

# 杀掉 nginx 并重启
sudo kill <nginxPid> && sudo nginx

# 路由追踪 trip
sudo trip <domain>

# 路由追踪 系统
traceroute <domain>

$ deviceIos: ios-deploy -c | fzf | awk '{for(i=1;i<=NF;i++){ if($i == "a.k.a.") { print $(i+1) } }}' | xargs echo
$ deviceAnd: adb devices | fzf | awk '{print $1}' | xargs echo
$ apkPath: ls ~/Desktop/app | fzf -q .apk | awk '{print "~/Desktop/app/"$1}' | xargs echo
$ nginxPid: ps aux | grep nginx | fzf | awk '{print $2}' | xargs echo
